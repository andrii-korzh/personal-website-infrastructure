Parameters:
  DistributionId:
    Type: String
  DeployBucket:
    Type: String
  BranchName:
    Type: String
  RepositoryName:
    Type: String
  GitHubOwner:
    Type: String
  GitHubSecret:
    Type: String
    NoEcho: true
  GitHubOAuthToken:
    Type: String
    NoEcho: true

Resources:
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - !GetAtt
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join
              - ''
              - - !GetAtt
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false
  AppPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref CodePipeline
      TargetAction: SourceAction
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                Resource: "*"
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'cloudfront:CreateInvalidation'
                Resource: "*"
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 10
            pre_build:
              commands:
                - npm install
            build:
              commands:
                - npm run build
            post_build:
              commands:
                - echo deploy to $ENV_BUCKET
                - aws s3 sync ./build s3://$ENV_BUCKET --delete
                - echo invalidate CDN $ENV_DISTRIBUTION_ID
                - aws cloudfront create-invalidation --distribution-id $ENV_DISTRIBUTION_ID --paths "/*"
#
#          artifacts:
#            files:
#              - '**/*'
#            base-directory: build
#      BadgeEnabled: true
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        EnvironmentVariables:
          - Name: ENV_BUCKET
            Value: !Ref DeployBucket
          - Name: ENV_DISTRIBUTION_ID
            Value: !Ref DistributionId
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'cloudwatch:*'
                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - 'codecommit:CancelUploadArchive'
#                  - 'codecommit:GetBranch'
#                  - 'codecommit:GetCommit'
#                  - 'codecommit:GetUploadArchiveStatus'
#                  - 'codecommit:UploadArchive'
#                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - 'codedeploy:CreateDeployment'
#                  - 'codedeploy:GetApplicationRevision'
#                  - 'codedeploy:GetDeployment'
#                  - 'codedeploy:GetDeploymentConfig'
#                  - 'codedeploy:RegisterApplicationRevision'
#                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - 'devicefarm:ListProjects'
#                  - 'devicefarm:ListDevicePools'
#                  - 'devicefarm:GetRun'
#                  - 'devicefarm:GetUpload'
#                  - 'devicefarm:CreateUpload'
#                  - 'devicefarm:ScheduleRun'
#                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - 'lambda:InvokeFunction'
#                  - 'lambda:ListFunctions'
#                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - 'iam:PassRole'
#                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - 'elasticbeanstalk:*'
#                  - 'ec2:*'
#                  - 'elasticloadbalancing:*'
#                  - 'autoscaling:*'
#                  - 'cloudwatch:*'
#                  - 's3:*'
#                  - 'sns:*'
#                  - 'cloudformation:*'
#                  - 'rds:*'
#                  - 'sqs:*'
#                  - 'ecs:*'
#                Resource: '*'
